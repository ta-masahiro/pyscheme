;;;"mzscheme.init" Initialization for SLIB for mzscheme	-*-scheme-*-
;;; This code is in the public domain.

;;@ (software-type) should be set to the generic operating system type.
;;; unix, vms, macos, amiga and ms-dos are supported.
(define (software-type) 'unix)

;;@ (scheme-implementation-type) should return the name of the scheme
;;; implementation loading this file.
(define (scheme-implementation-type) '|SECD|)

;;@ (scheme-implementation-home-page) should return a (string) URI
;;; (Uniform Resource Identifier) for this scheme implementation's home
;;; page; or false if there isn't one.
(define (scheme-implementation-home-page) "http://www.plt-scheme.org/")

;;@ (scheme-implementation-version) should return a string describing
;;; the version the scheme implementation loading this file.
(define (scheme-implementation-version) version)

;;@ (implementation-vicinity) should be defined to be the pathname of
;;; the directory where any auxillary files to your Scheme
;;; implementation reside.
(define (implementation-vicinity) "/home/masahiro/python/")

;;@ (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.
(define (library-vicinity) "/usr/share/slib/")

;;@ (home-vicinity) should return the vicinity of the user's HOME
;;; directory, the directory which typically contains files which
;;; customize a computer environment for a user.
(define (home-vicinity) "/home/masahiro/")

(define in-vicinity string-append)
;@
(define (user-vicinity) "/home/masahiro/")

;(define *load-pathname* #f)	 ; *load-path* is a list of dirs in s7
(define *load-pathname* "/usr/share/slib/")	 ; *load-path* is a list of dirs in s7
;@
(define (vicinity:suffix? c) (eqv? c "/"))
;@
(define (pathname->vicinity pathname)
  (let loop ((i (- (string-length pathname) 1)))
    (cond ((negative? i) "")
	  ((vicinity:suffix? (string-ref pathname i))
	   (substring pathname 0 (+ i 1)))
	  (else (loop (- i 1))))))
;@
(define (program-vicinity)
  (if *load-pathname*
      (pathname->vicinity *load-pathname*)
      (slib:error 'program-vicinity " called; use slib:load to load")))
;@
(define sub-vicinity
  (case (software-type)
    ((vms) (lambda (vic name)
	     (let ((l (string-length vic)))
	       (if (or (zero? (string-length vic))
		       (not (char=? #\] (string-ref vic (- l 1)))))
		   (string-append vic "[" name "]")
		   (string-append (substring vic 0 (- l 1))
				  "." name "]")))))
    (else (let ((*vicinity-suffix*
		 (case (software-type)
		   ((nosve) ".")
		   ((macos thinkc) ":")
		   ((ms-dos windows atarist os/2) "\\")
		   ((unix coherent plan9 amiga) "/"))))
	    (lambda (vic name)
	      (string-append vic name *vicinity-suffix*))))))
;@
(define (make-vicinity <pathname>) <pathname>)
;@
(define with-load-pathname
  (let ((exchange
	 (lambda (new)
	   (let ((old *load-pathname*))
	     (set! *load-pathname* new)
	     old))))
    (lambda (path thunk)
      (let ((old #f))
	(dynamic-wind
	    (lambda () (set! old (exchange path)))
	    thunk
	    (lambda () (exchange old)))))))

;;; slib:features should be set to a list of symbols describing
;;; features of this implementation.  Suggestions for features are:

(define slib:features
  '(
    source				;can load scheme source files
					;(SLIB:LOAD-SOURCE "filename")
;;;	compiled			;can load compiled files
					;(SLIB:LOAD-COMPILED "filename")
    vicinity
    srfi-59
    srfi-96

    ;; Scheme report features
    ;; R5RS-compliant implementations should provide all 9 features.

;;;	r5rs				;conforms to
    eval				;R5RS two-argument eval
    values				;R5RS multiple values
;    dynamic-wind		;R5RS dynamic-wind
    macro				;R5RS high level macros
    macro-by-example
	delay				;has DELAY and FORCE
;;; "delay" is named "make-promise" in s7

    multiarg-apply		     ;APPLY can take more than 2 args.
    char-ready?
    rev4-optional-procedures	       ;LIST-TAIL, STRING-COPY,
					;STRING-FILL!, and VECTOR-FILL!

    ;; These four features are optional in both R4RS and R5RS

;;; multiarg/and-		   ;/ and - can take more than 2 args.
    rationalize
;;;	transcript			;TRANSCRIPT-ON and TRANSCRIPT-OFF
;;; with-file				;has WITH-INPUT-FROM-FILE and
					;WITH-OUTPUT-TO-FILE

;;;	r4rs				;conforms to

;;;	ieee-p1178			;conforms to
;;; I don't know what ieee-p1178 is

;;;	r3rs				;conforms to
;;; I don't know what this means

;;;	rev2-procedures			;SUBSTRING-MOVE-LEFT!,
					;SUBSTRING-MOVE-RIGHT!,
					;SUBSTRING-FILL!,
					;STRING-NULL?, APPEND!, 1+,
					;-1+, <?, <=?, =?, >?, >=?
;;;	object-hash			;has OBJECT-HASH

    full-continuation			;can return multiple times
;;;	ieee-floating-point		;conforms to IEEE Standard 754-1985
					;IEEE Standard for Binary
					;Floating-Point Arithmetic.
;;; if this means all the NaN and inf stuff, then s7 does not conform

    ;; Other common features

;;;	srfi-0				;srfi-0, COND-EXPAND finds all srfi-*
;;;	sicp				;runs code from Structure and
					;Interpretation of Computer
					;Programs by Abelson and Sussman.
;;; ?? never tried to run it

    defmacro				;has Common Lisp DEFMACRO
;;;	syntax-case			;has syncase:eval and syncase:load
;;;	record				;has user defined data structures
;;; string-port			    ;has CALL-WITH-INPUT-STRING and
					;CALL-WITH-OUTPUT-STRING
;;;	sort
;;; s7 has sort! but not merge etc

;;;	pretty-print
    object->string
;;; format				;Common-lisp output formatting
;;;	trace				;has macros: TRACE and UNTRACE
;;; s7 does have these functions, but not "print-call-stack"

;;;	compiler			;has (COMPILER)
;;;	ed				;(ED) is editor
;;; system				;posix (system <string>)
;;; getenv				;posix (getenv <string>)
;;;	program-arguments		;returns list of strings (argv)
;;;	current-time			;returns time in seconds since 1/1/1970

    ;; Implementation Specific features
    ;random

    ))
;@
;(define (program-arguments)
;  (cons (symbol->string (scheme-implementation-type))
;	(vector->list (current-command-line-arguments))))
;
;(require (lib "pretty.ss"))
;(unless (memq (system-type) '(unix beos))
;  (namespace-require '(lib "date.ss")))
;@
;(define current-time
;  ;; Gives time since 1/1/1970 ...
;  ;;   ... GMT for Unix, Windows, and Mac OS X.
;  ;;   ... local time for Mac OS.
;  (if (memq (system-type) '(unix macosx windows))
;      current-seconds
;      (let ([zero (find-seconds 0 0 0 1 1 1970)])
;	(lambda ()
;	  (- (current-seconds) zero)))))

;;@ (FILE-POSITION <port> . <k>)
(define (file-position . args) #f)

;;@ (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;@ (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
;; Already in MzScheme

;;@ (TMPNAM) makes a temporary file name.
(define tmpnam (let ((cntr 100))
		 (lambda () (set! cntr (+ 1 cntr))
			 (string-append "slib_" (number->string cntr)))))

;;; (FILE-EXISTS? <string>)
;; Already in MzScheme

;;; (DELETE-FILE <string>)
;; Already in MzScheme

;;@ FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
;(define force-output flush-output)
(define (force-output . arg) #t)

;;@ CALL-WITH-INPUT-STRING and CALL-WITH-OUTPUT-STRING are the string
;;; port versions of CALL-WITH-*PUT-FILE.
;(define call-with-input-string
;  (lambda (string thunk)
;    (parameterize ((current-input-port (open-input-string string)))
;      (thunk (current-input-port)))))
;(define call-with-output-string
;  (lambda (receiver)
;    (let ((sp (open-output-string)))
;      (receiver sp)
;      (get-output-string sp))))

;;; "rationalize" adjunct procedures.
(define (find-ratio x e)
  (let ((rat (rationalize x e)))
    (list (numerator rat) (denominator rat))))
(define (find-ratio-between x y)
  (find-ratio (/ (+ x y) 2) (/ (- x y) 2)))

;;@ CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 256)

;;@ MOST-POSITIVE-FIXNUM is used in modular.scm
;(define most-positive-fixnum #x3FFFFFFF) ; 30 bits on 32-bit machines
(define most-positive-fixnum (- (expt 2 62) 1)) ; 62 bits on 64-bit machines

;;@ Return argument
(define (identity x) x)

;;@ SLIB:EVAL is single argument eval using the top-level (user) environment.
(define slib:eval eval)

(define *defmacros*
  (list (cons 'defmacro
	      (lambda (name parms . body)
		`(set! *defmacros* (cons (cons ',name (lambda ,parms ,@body))
					 *defmacros*))))))
;@
(define (defmacro? m) (and (assq m *defmacros*) #t))
;@
(define (macroexpand-1 e)
  (if (pair? e)
      (let ((a (car e)))
	(cond ((symbol? a) (set! a (assq a *defmacros*))
	       (if a (apply (cdr a) (cdr e)) e))
	      (else e)))
      e))
;@
(define (macroexpand e)
 (if (pair? e)
      (let ((a (car e)))
	(cond ((symbol? a)
	       (set! a (assq a *defmacros*))
	       (if a (macroexpand (apply (cdr a) (cdr e))) e))
	      (else e)))
      e))
;@
(define gentemp
  (let ((*gensym-counter* -1))
    (lambda ()
      (set! *gensym-counter* (+ *gensym-counter* 1))
      (string->symbol
       (string-append "slib:G" (number->string *gensym-counter*))))))

(define base:eval slib:eval)
;@
(define (defmacro:eval x) (base:eval (defmacro:expand* x)))
(define (defmacro:expand* x)
  (slib:require 'defmacroexpand) (apply defmacro:expand* x '()))
;@
(define (defmacro:load <pathname>)
;  (slib:eval-load <pathname> defmacro:eval))
   (slib:load-source <pathname>))
;@
(define slib:warn
  (lambda args
    (let ((cep (current-error-port)))
      (if (provided? 'trace) (print-call-stack cep))
      (display "Warn: " cep)
      (for-each (lambda (x) (display #\space cep) (write x cep)) args)
      (newline cep))))

;;@ define an error procedure for the library
(define slib:error
  (let ((error error))
    (lambda args
      (let ((cep (current-error-port)))
	(if (provided? 'trace) (print-call-stack cep))
	;(apply error "Error:" args)))))
	(apply error args)))))
;@
(define (make-exchanger obj)
  (lambda (rep) (let ((old obj)) (set! obj rep) old)))
;@
(define (open-file filename modes)
  (case modes
    ((r rb) (open-input-file filename))
    ((w wb) (open-output-file filename))
    (else (slib:error 'open-file 'mode? modes))))
;;(define (port? obj) (or (input-port? obj) (output-port? obj)))
;@
;(define (call-with-open-ports . ports)
;  (define proc (car ports))
;  (cond ((procedure? proc) (set! ports (cdr ports)))
;	(else (set! ports (reverse ports))
;	      (set! proc (car ports))
;	      (set! ports (reverse (cdr ports)))))
;  (let ((ans (apply proc ports)))
;    (for-each close-port ports)
;    ans))
;@
(define (close-port port)
  (cond ((input-port? port)
	 (close-input-port port)
	 (if (output-port? port) (close-output-port port)))
	((output-port? port) (close-output-port port))
	(else (slib:error 'close-port 'port? port))))
;@
;(define (browse-url url)
;  (define (try cmd end) (zero? (system (string-append cmd url end))))
;  (or (try "netscape-remote -remote 'openURL(" ")'")
;      (try "netscape -remote 'openURL(" ")'")
;      (try "netscape '" "'&")
;      (try "netscape '" "'")))

;;@ define these as appropriate for your system.
(define slib:tab (integer->char 9))
(define slib:form-feed (integer->char 12))

;;@ Support for older versions of Scheme.  Not enough code for its own file.
;(define (last-pair l) (if (pair? (cdr l)) (last-pair (cdr l)) l)) ; use primitive
(define t #t)
(define nil #f)

;;@ Define these if your implementation's syntax can support it and if
;;; they are not already defined.
;(define 1+ add1)
;(define -1+ sub1)
;(define 1- -1+)
(define -1+ 1-)

;;@ Define SLIB:EXIT to be the implementation procedure to exit or
;;; return if exiting not supported.
(define slib:exit exit)

;;@ Here for backward compatability
(define scheme-file-suffix
  (let ((suffix (case (software-type)
		  ((nosve) "_scm")
		  (else ".scm"))))
    (lambda () suffix)))

;(define (ensure-path-string p)
;  (if (path? p) (path->string p) p))

;;@ (SLIB:LOAD-SOURCE "foo") should load "foo.scm" or with whatever
;;; suffix all the module files in SLIB have.  See feature 'SOURCE.
(define (slib:load-source f) (load (string-append f ".scm")))

;;@ (SLIB:LOAD-COMPILED "foo") should load the file that was produced
;; by compiling "foo.scm" if this implementation can compile files.
;;; See feature 'COMPILED.
(define slib:load-compiled load)

;;@ At this point SLIB:LOAD must be able to load SLIB files.
(define slib:load slib:load-source)

;;; If your implementation provides R4RS macros:
(define macro:eval slib:eval)
(define macro:load slib:load-source)

;;; If your implementation provides syntax-case macros:
(define syncase:eval slib:eval)
(define syncase:load slib:load-source)

;(require (rename mzscheme mz:require require))

;(slib:load (in-vicinity (library-vicinity) "require"))

;;; Hack `require' to work with both SLIB and MzScheme:
;(define-syntax (require stx)
;  (syntax-case stx (quote)
;    [_
;     (identifier? stx)
;     #'slib:require]
;    [(_ (quote something))
;     #'(slib:require (quote something))]
;    [(_ req ...)
;     (if (eq? 'top-level (syntax-local-context))
;	 #'(mz:require req ...)
;	 #'(slib:require req ...))]))

;;; Previously loaded "/usr/local/lib/plt/collects/slibinit/init.ss"
;(cond ((string<? (version) "200")
;       (require-library "init.ss" "slibinit"))
;      (else
;       ;;(load (build-path (collection-path "slibinit") "init.ss"))
;       (eval '(require (lib "defmacro.ss")))))


; (define call-with-current-continuation #t)     ;for dynamic-wind
; (define-macro (defmacro name args body)         ;for defmaro
;   `(define-macro ,name (lambda ,args ,body)))
;(load "/usr/share/slib/require.scm")
(define-macro (use x) (require x))
